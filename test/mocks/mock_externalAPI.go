// Code generated by MockGen. DO NOT EDIT.
// Source: external/externalAPI.go
//
// Generated by this command:
//
//	mockgen -source=external/externalAPI.go -destination=test/mocks/mock_externalAPI.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExchangeRateFetcher is a mock of ExchangeRateFetcher interface.
type MockExchangeRateFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateFetcherMockRecorder
	isgomock struct{}
}

// MockExchangeRateFetcherMockRecorder is the mock recorder for MockExchangeRateFetcher.
type MockExchangeRateFetcherMockRecorder struct {
	mock *MockExchangeRateFetcher
}

// NewMockExchangeRateFetcher creates a new mock instance.
func NewMockExchangeRateFetcher(ctrl *gomock.Controller) *MockExchangeRateFetcher {
	mock := &MockExchangeRateFetcher{ctrl: ctrl}
	mock.recorder = &MockExchangeRateFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateFetcher) EXPECT() *MockExchangeRateFetcherMockRecorder {
	return m.recorder
}

// FetchValidExchangeRate mocks base method.
func (m *MockExchangeRateFetcher) FetchValidExchangeRate(date, sixMonths, currency string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchValidExchangeRate", date, sixMonths, currency)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchValidExchangeRate indicates an expected call of FetchValidExchangeRate.
func (mr *MockExchangeRateFetcherMockRecorder) FetchValidExchangeRate(date, sixMonths, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchValidExchangeRate", reflect.TypeOf((*MockExchangeRateFetcher)(nil).FetchValidExchangeRate), date, sixMonths, currency)
}
