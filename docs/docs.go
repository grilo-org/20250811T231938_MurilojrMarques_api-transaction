// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/transaction": {
            "post": {
                "description": "Cria uma nova transação de compra no banco de dados com os dados fornecidos",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Cria uma nova transação",
                "parameters": [
                    {
                        "description": "Dados da transação",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Transaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Transaction"
                        }
                    },
                    "400": {
                        "description": "Dados inválidos",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Erro interno no servidor",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transaction/{id}/convert": {
            "get": {
                "description": "Busca uma transação pelo ID e converte seu valor para a moeda especificada",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Retorna uma transação convertida para outra moeda",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID da transação",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Moeda para conversão (padrão: USD)",
                        "name": "currency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConvertedTransaction"
                        }
                    },
                    "400": {
                        "description": "ID inválido",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Erro interno no servidor",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ConvertedTransaction": {
            "type": "object",
            "required": [
                "date",
                "description",
                "value"
            ],
            "properties": {
                "converted_value": {
                    "type": "number"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 50
                },
                "exchange_rate": {
                    "type": "number"
                },
                "id_transaction": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model.Transaction": {
            "type": "object",
            "required": [
                "date",
                "description",
                "value"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 50
                },
                "id_transaction": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Transaction api",
	Description:      "Api para conversão de transação",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
